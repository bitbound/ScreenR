@using System.Drawing
@using System.Diagnostics
@using System.Runtime.InteropServices
@using ScreenR.Shared.Models
@inject IJSRuntime JsRuntime
@inject IUserHubConnection UserHub

<canvas id="desktopCanvas" 
    @ref="_canvasRef" 
    width="@_canvasWidth" 
    height="@_canvasHeight"
    class="@_canvasClass" />

@code {
    private readonly Guid _desktopId = Guid.NewGuid();
    private IEnumerable<DisplayInfo> _displays;
    private int _canvasWidth = 1920;
    private int _canvasHeight = 1080;
    private string _canvasClass = "fit";

    private ElementReference _canvasRef;
    private IJSObjectReference? _module;


    public async Task GetStream(Guid sessionId)
    {
        // TODO.
        //_displays = await UserHub.GetDisplays();

        var ms = new MemoryStream();
        await foreach (var chunk in UserHub.GetDesktopStream(sessionId, _desktopId))
        {
            await ms.WriteAsync(chunk.ImageBytes);

            if (chunk.EndOfFrame)
            {
                await Task.Delay(100);
                ms.Seek(0, SeekOrigin.Begin);
                DrawImageUnmarshalled(ms.ToArray(), chunk.Area);
                ms.Dispose();
                ms = new();
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (_module is null)
        {
            _module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/RemoteDesktop.razor.js");
        }
    }

    private async Task DrawImage(byte[] imageBytes, Rectangle destinationArea)
    {
        if (_module is null)
        {
            return;
        }

        await _module.InvokeVoidAsync("drawImage", _canvasRef, imageBytes, destinationArea);
    }

    private void DrawImageUnmarshalled(byte[] imageBytes, Rectangle destinationArea)
    {
        if (_module is null)
        {
            return;
        }

        var unmod = (IJSUnmarshalledObjectReference)_module;
        var result = unmod.InvokeUnmarshalled<byte[], Rectangle, int>("drawImageUnmarshalled", imageBytes, destinationArea);
        Console.WriteLine(result);
    }


}
