@implements IDisposable
@using ScreenR.Shared.Dtos
@using ScreenR.Shared.Helpers
@using ScreenR.Shared.Models
@inject IUserHubConnection UserHub
@inject IJsInterop JsInterop
@inject IApiClient ApiClient
@inject ILogger<Dashboard> Logger

<h3>Dashboard</h3>

<h4 class="mt-5">Service Devices</h4>
<div class="shadow-sm p-3 mt-3 rounded">
    <table class="table table-striped table-responsive">
        <thead>
            <tr>
                <th>Online</th>
                <th>Actions</th>
                <th>Computer Name</th>
                <th>Alias</th>
                <th>Last Online</th>
                <th>Storage Used</th>
                <th>Total Storage</th>
                <th>Operating System</th>
                <th>CPU Architecture</th>
                <th>Processors</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var device in _serviceDevices)
            {
                <tr>
                    <td>
                        @if (device.IsOnline)
                        {
                            <span class="dot online" />
                        }
                        else
                        {
                            <span class="dot offline" />
                        }
                    </td>
                    <td>
                             <DropdownButton ButtonClass="btn-primary">
                                <ButtonContent>
                                    <i class="oi oi-bolt"></i>
                                    <span>Actions</span>
                                </ButtonContent>
                                <ChildListItems>
                                    <li>
                                        <button class="dropdown-item" @onclick="() => StartRemoteControl(device)">
                                            <i class="oi oi-laptop" title="Remote Control"></i>
                                            <span class="ml-2">Remote Control</span>
                                        </button>
                                    </li> 
                                </ChildListItems>
                            </DropdownButton>
                    </td>
                    <td>@(device.ComputerName)</td>
                    <td>@(device.Alias)</td>
                    <td>@(device.LastOnline)</td>
                    <td>@(DeviceHelper.GetFormattedStoragePercent(device))</td>
                    <td>@(device.TotalStorage)GB</td>
                    <td>@(device.OperatingSystem)</td>
                    <td>@(device.Architecture)</td>
                    <td>@(device.ProcessorCount)</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<h4 class="mt-5">Desktop Devices</h4>
<div class="shadow-sm p-3 mt-3 rounded">
    <table class="table table-striped table-responsive">
        <thead>
            <tr>
                <th>Online</th>
                <th>Computer Name</th>
                <th>Alias</th>
                <th>Last Online</th>
                <th>Storage Used</th>
                <th>Total Storage</th>
                <th>Operating System</th>
                <th>CPU Architecture</th>
                <th>Processors</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var device in _desktopDevices)
            {
                <tr>
                    <td>
                        @if (device.IsOnline)
                        {
                            <span class="dot online" />
                        }
                        else
                        {
                            <span class="dot offline" />
                        }
                    </td>
                    <td>@(device.ComputerName)</td>
                    <td>@(device.Alias)</td>
                    <td>@(device.LastOnline)</td>
                    <td>@(DeviceHelper.GetFormattedStoragePercent(device))</td>
                    <td>@(device.TotalStorage)GB</td>
                    <td>@(device.OperatingSystem)</td>
                    <td>@(device.Architecture)</td>
                    <td>@(device.ProcessorCount)</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private readonly ObservableCollection<DesktopDevice> _desktopDevices = new();
    private readonly ObservableCollection<ServiceDevice> _serviceDevices = new();

    public void Dispose()
    {
        UserHub.DesktopDeviceUpdated -= OnDesktopDeviceUpdated;
        UserHub.ServiceDeviceUpdated -= OnServiceDeviceUpdated;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        UserHub.DesktopDeviceUpdated += OnDesktopDeviceUpdated;
        UserHub.ServiceDeviceUpdated += OnServiceDeviceUpdated;

        try
        {
            var serviceDevices = await ApiClient.GetServiceDevices();
            _serviceDevices.AddRange(serviceDevices);

            var desktopDevices = await ApiClient.GetDesktopDevices();
            _desktopDevices.AddRange(desktopDevices);
        }
        catch(Exception ex)
        {
            Logger.LogError(ex, "Error while getting devices.");
        }
    }

    private async void OnDesktopDeviceUpdated(object? sender, DesktopDevice device)
    {
        if (_desktopDevices.TryFindIndex(x => x.SessionId == device.SessionId, out var index))
        {
            _desktopDevices[index] = device;
        }
        else
        {
            _desktopDevices.Add(device);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async void OnServiceDeviceUpdated(object? sender, ServiceDevice device)
    {
        if (_serviceDevices.TryFindIndex(x => x.DeviceId == device.DeviceId, out var index))
        {
            _serviceDevices[index] = device;
        }
        else
        {
            _serviceDevices.Add(device);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task StartRemoteControl(ServiceDevice device)
    {
        
    }

    //private string? _desktopId;

    //public async Task Test()
    //{
    //    if (!Guid.TryParse(_desktopId, out var sessionResult))
    //    {
    //        await JsInterop.Alert("Desktop ID must be a valid GUID.");
    //        return;
    //    }

    //    if (_desktop is null)
    //    {
    //        return;
    //    }

    //    await _desktop.GetStream(sessionResult);
    //}
}
