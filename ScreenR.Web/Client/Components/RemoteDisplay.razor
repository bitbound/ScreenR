@using System.Drawing
@using System.Diagnostics
@using System.Runtime.InteropServices
@using System.Text
@inject IJSRuntime JsRuntime
@inject IUserHubConnection UserHub
@inject IToastService Toasts

<div class="display-wrapper bg-dark @($"{_windowState}".ToLower()) @Class">
    <div class="title-bar p-2">
        <div style="align-self: center">
            <strong>
                @(Session?.DeviceName)
            </strong>
        </div>
        <div class="text-end" style="white-space: nowrap">
            @if (_windowState != WindowState.Minimized)
            {
                <button title="Minimize" 
                        class="btn btn-secondary pointer mr-2"
                        @onclick="@(() => _windowState = WindowState.Minimized)">
                    <span class="oi oi-minus" />
                </button>
            }

            @if (_windowState != WindowState.Restored)
            {
                <button title="Restore" 
                        class="btn btn-secondary pointer mr-2"
                        @onclick="@(() => _windowState = WindowState.Restored)">
                    <span class="oi oi-fullscreen-exit" />
                </button>
            }
            
            @if (_windowState != WindowState.Maximized)
            {
                <button title="Maximize" 
                        class="btn btn-secondary pointer mr-2"
                        @onclick="@(() => _windowState = WindowState.Maximized)">
                    <span class="oi oi-fullscreen-enter" />
                </button>
            }

            <button class="btn btn-secondary pointer" title="Close">
                <span class="oi oi-x" />
            </button>
        </div>
    </div>
    <div class="content-area">
        <canvas id="@_canvasId" 
            @ref="_canvasRef" 
            width="@_canvasWidth" 
            height="@_canvasHeight"
            class="@_canvasClass" />
    </div>
</div>

@code {
    private readonly string _canvasId = $"canvas-{Guid.NewGuid()}";
    private IEnumerable<DisplayDto> _displays = Enumerable.Empty<DisplayDto>();
    private DisplayDto? _selectedDisplay;
    private int _canvasWidth = 0;
    private int _canvasHeight = 0;
    private string _canvasClass = "fit";
    private WindowState _windowState = WindowState.Maximized;

    private ElementReference _canvasRef;
    private IJSObjectReference? _module;

    #nullable disable

    [Parameter]
    public string Class { get; set; } = string.Empty;

    [Parameter, EditorRequired]
    public RemoteSession Session { get; set; }

    #nullable enable


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (_module is null)
        {
            _module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/RemoteDisplay.razor.js");
        }

        if (firstRender)
        {
            await GetStream(Session.SessionId);
        }
    }

    private async Task DrawImage(byte[] imageBytes, Rectangle destinationArea)
    {
        if (_module is null)
        {
            return;
        }

        await _module.InvokeVoidAsync("drawImage", _canvasRef, imageBytes, destinationArea);
    }

    private void DrawImageUnmarshalled(byte[] imageBytes, Rectangle destinationArea)
    {
        if (_module is null)
        {
            return;
        }

        var drawInfo = new DrawUnmarshalledInfo()
            {
                CanvasId = _canvasId,
                Left = destinationArea.Left,
                Top = destinationArea.Top,
                Width = destinationArea.Width,
                Height = destinationArea.Height
            };

        var unmod = (IJSUnmarshalledObjectReference)_module;
        unmod.InvokeUnmarshalled<byte[], DrawUnmarshalledInfo, int>(
            "drawImageUnmarshalled", 
            imageBytes, 
            drawInfo);
    }

    private async Task GetStream(Guid sessionId)
    {
        var result = await UserHub.GetDisplays(sessionId);

        if (!result.IsSuccess || result.Value is null)
        {
            Toasts.ShowToast("Failed to get remote displays", ScreenR.Shared.Enums.MessageLevel.Error);
            return;
        }

        _displays = result.Value;
        _selectedDisplay = _displays.FirstOrDefault(x => x.IsPrimary);

        if (_selectedDisplay is not null)
        {
            _canvasWidth = _selectedDisplay.Width;
            _canvasHeight = _selectedDisplay.Height;
        }

        await InvokeAsync(StateHasChanged);

        var ms = new MemoryStream();
        await foreach (var chunk in UserHub.GetDesktopStream(sessionId, Session.RequestId))
        {
            await ms.WriteAsync(chunk.ImageBytes);

            if (chunk.EndOfFrame)
            {
                ms.Seek(0, SeekOrigin.Begin);
                DrawImageUnmarshalled(ms.ToArray(), chunk.Area);
                ms.Dispose();
                ms = new();
                await UserHub.NotifyFrameReceived(sessionId, Session.RequestId);
            }
        }
    }

    private enum WindowState
    {
        Restored,
        Minimized,
        Maximized
    }
}
