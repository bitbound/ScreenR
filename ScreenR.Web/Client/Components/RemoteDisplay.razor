@using System.Drawing
@using System.Diagnostics
@using System.Runtime.InteropServices
@using ScreenR.Shared.Models
@inject IJSRuntime JsRuntime
@inject IUserHubConnection UserHub

<div class="display-wrapper @Class">
    <div class="title-bar">

    </div>
    <div class="content-area">
        <canvas id="desktopCanvas" 
            @ref="_canvasRef" 
            width="@_canvasWidth" 
            height="@_canvasHeight"
            class="@_canvasClass" />
    </div>
</div>

@code {
    private readonly Guid _desktopId = Guid.NewGuid();
    private IEnumerable<DisplayInfo> _displays = Enumerable.Empty<DisplayInfo>();
    private int _canvasWidth = 0;
    private int _canvasHeight = 0;
    private string _canvasClass = "fit";

    private ElementReference _canvasRef;
    private IJSObjectReference? _module;

    #nullable disable

    [Parameter]
    public string Class { get; set; } = string.Empty;

    [Parameter, EditorRequired]
    public RemoteSession Session { get; set; }

    #nullable enable


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (_module is null)
        {
            _module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/RemoteDesktop.razor.js");
        }

        await GetStream(Session.SessionId);
    }

    private async Task DrawImage(byte[] imageBytes, Rectangle destinationArea)
    {
        if (_module is null)
        {
            return;
        }

        await _module.InvokeVoidAsync("drawImage", _canvasRef, imageBytes, destinationArea);
    }

    private void DrawImageUnmarshalled(byte[] imageBytes, Rectangle destinationArea)
    {
        if (_module is null)
        {
            return;
        }

        var unmod = (IJSUnmarshalledObjectReference)_module;
        var result = unmod.InvokeUnmarshalled<byte[], Rectangle, int>("drawImageUnmarshalled", imageBytes, destinationArea);
        Console.WriteLine(result);
    }

    private async Task GetStream(Guid sessionId)
    {
        // TODO.
        //_displays = await UserHub.GetDisplays();

        var ms = new MemoryStream();
        await foreach (var chunk in UserHub.GetDesktopStream(sessionId, _desktopId))
        {
            await ms.WriteAsync(chunk.ImageBytes);

            if (chunk.EndOfFrame)
            {
                ms.Seek(0, SeekOrigin.Begin);
                DrawImageUnmarshalled(ms.ToArray(), chunk.Area);
                ms.Dispose();
                ms = new();
            }
        }
    }
}
